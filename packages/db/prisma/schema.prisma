// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// If you're using sqlite, make sure to use the following flags for the user role.
// enum Role {
//   USER
//   ADMIN
// }

model User {
  id             String      @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")
  tokens   Token[]
  sessions Session[]

  avatar String?

  verified Boolean @default(false)

  posts    Post[]
  comments Comment[]
  calendarEvents CalendarEvent[]
  inventory Inventory?
  events Event[]
}

model Session {
  id                 String      @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  hashedSessionToken String?
  csrfToken          String?
  data               String?
  user   User? @relation(fields: [userId], references: [id])
  userId String?
}

// If you're using sqlite, make sure to use the following flags for the token types.
// enum TokenTypes {
//   RESET_PASSWORD
//   INVITE_TOKEN
//   API_KEY
// }

model Token {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId String


  lastFour String?

  @@unique([hashedToken, type])
}

model Post {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  slug        String @unique
  body        String
  comments    Comment[]
  tags        Tag[]
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  userId      String
  user        User @relation(fields: [userId], references: [id])
}

model Comment {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  body        String
  postId      String
  post        Post @relation(fields: [postId], references: [id])
  userId      String
  user        User @relation(fields: [userId], references: [id])

  parentId    String? // This is the id of the parent comment
  parent      Comment? @relation("CommentToComment", fields: [parentId], references: [id]) // This is the parent comment
  replies     Comment[] @relation("CommentToComment") // These are the replies to the comment
}



model CalendarEvent {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  date        DateTime
  description String
  going       User[]
}



model Item {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  image       String?
  price       Int

  inventoryItemId String @unique
  inventoryItem InventoryItem? @relation(fields: [inventoryItemId], references: [id])
}

model Badge {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  image       String?
  condition   Condition?

  inventoryItem InventoryItem? @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String @unique
}

model Action {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title String
  value Int
  conditions Condition[]
  events Event[]
}

model Tag {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  posts Post[]
}

model Category {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title String
  slug  String @unique
  posts Post[]
}

model Event {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
  origin String
  action Action @relation(fields: [actionId], references: [id])
  actionId String
}

model Inventory {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String @unique

  collection InventoryItem[]
}

model InventoryItem {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  inventory Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String

  type String

  equipped Boolean @default(false)

  item Item?
  badge Badge?
}

model Condition {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  actions Action[]
  badge Badge @relation(fields: [badgeId], references: [id])
  badgeId String @unique
}

model GlobalSetting {
  id          Int     @default(1) @unique
  siteTitle   String @default("dir.zip")
  features FeatureToggle[]
}

model FeatureToggle {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  feature   String   @unique
  isActive  Boolean  @default(false)
  globalSetting GlobalSetting @relation(fields: [globalSettingId], references: [id])
  globalSettingId Int @default(1) 
}
